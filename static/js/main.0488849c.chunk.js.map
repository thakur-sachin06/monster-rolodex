{"version":3,"sources":["components/card/card.component.js","components/card-list/card-list.component.js","components/search-box/search-box.component.js","App.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","key","SearchBox","type","placeholder","onChange","handleChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","catch","error","console","log","this","filteredMonsters","filter","toLowerCase","includes","Component","ReactDOM","render","document","getElementById"],"mappings":"mVAEaA,G,kBAAO,SAAAC,GAChB,OACI,yBAAKC,UAAa,kBACd,yBAAKC,IAAM,WAAWC,IAAG,+BAA2BH,EAAMI,QAAQC,GAAzC,4BACzB,gCAAML,EAAMI,QAAQE,KAApB,KACA,+BAAKN,EAAMI,QAAQG,MAAnB,QCHCC,EAAW,SAAAR,GACpB,OACA,yBAAKC,UAAa,aACfD,EAAMS,SAASC,KAAK,SAAAN,GAAO,OAAK,kBAAC,EAAD,CAAMA,QAASA,EAASO,IAAOP,EAAQC,UCJjEO,G,MAAY,SAAAZ,GACrB,OACM,2BAAOa,KAAK,SAASZ,UAAa,SAAUa,YAAed,EAAMc,YAAaC,SAAYf,EAAMgB,iBCwC3FC,E,YAvCb,aAAc,IAAD,8BACX,+CAeFD,aAAe,SAACE,GACd,EAAKC,SAAS,CACZC,YAAcF,EAAEG,OAAOC,SAhBzB,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAa,IAJJ,E,iFASO,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACV,SAASmB,OACtCC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,uB,+BASrB,IAAD,EAC4BC,KAAKV,MAA/Bd,EADF,EACEA,SAAUW,EADZ,EACYA,YACZc,EAAmBzB,EAAS0B,QAAQ,SAAA/B,GAAO,OAC/CA,EAAQE,KAAK8B,cAAcC,SAASjB,EAAYgB,kBAElD,OAEE,yBAAKnC,UAAU,OACb,iDACA,kBAAC,EAAD,CAAWa,YAAa,kBAAmBE,aAAgBiB,KAAKjB,eAChE,kBAAC,EAAD,CAAUP,SAAayB,S,GAjCbI,aCClBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.0488849c.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\nexport const Card = props => {\n    return(\n        <div className = {'card-container'}>\n            <img alt = 'monsters' src= {`https://robohash.org/${props.monster.id}?set=set2&size=160x160`} />\n            <h2> {props.monster.name} </h2>\n            <p> {props.monster.email} </p>\n        </div>\n    )\n}\n\n//component for each card","import React from 'react';\nimport './card-list.styles.css';\nimport { Card } from '../card/card.component';\n\nexport const CardList = props => {\n    return(\n    <div className = {'card-list'}> \n      {props.monsters.map( monster => (<Card monster={monster} key = {monster.id}/>))} \n    </div>\n    )\n}","import React from 'react';\nimport './search-box.styles.css';\n\nexport const SearchBox = props => {\n    return(\n          <input type='search' className = {'search'} placeholder = {props.placeholder} onChange = {props.handleChange}/> \n        )\n}","import React, {Component} from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n    \n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json()) // if success occur from API, fetch will resolve the value and return the response. then we convert response to json object\n    .then(users => this.setState({monsters:users})) // above statement will wrap the response into resolved promise. hence we use again .then \n    .catch(error => console.log('error occurred'))  //if an error occcur from API, fetch will rejected the error on our Promise object and we'll get this message\n  }\n  \n  handleChange = (e) => {\n    this.setState({\n      searchField : e.target.value\n    })\n  }\n\n  render(){\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter( monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase()) //logic to filter out monsters base on search field. toLowerCase is added to avoid case sensitive search\n      );\n    return (\n\n      <div className=\"App\">\n        <h1> Monster Rolodex </h1>\n        <SearchBox placeholder={'search monsters'} handleChange = {this.handleChange} />\n        <CardList monsters = { filteredMonsters }/>  \n\n      </div> // in above line sending filtered monsters as props to card-list component\n  );\n}\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}